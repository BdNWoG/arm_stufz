# this file views a specific list of time in a joblib

import matplotlib.pyplot as plt
import joblib
import numpy as np

JOBLIB_FILE = "/Users/billygao/Downloads/eDS20HZVZS_V2DataRedo_realsense0801_lag_refined.joblib"

# EDIT THIS LIST TO INCLUDE THE TIME VALUES YOU WANT TO EXAMINE:
TIMES_OF_INTEREST = [1702511010.0997202, 1702511010.1497202, 1702511010.1997201, 1702511010.24972, 1702511010.29972, 1702511010.34972, 1702511010.39972, 1702511010.44972, 1702511010.4997199, 1702511010.5497198, 1702511010.5997198, 1702511010.6497197, 1702511010.6997197, 1702511010.7497196, 1702511010.7997196, 1702511010.8497195, 1702511010.8997195, 1702511010.9497194, 1702511010.9997194, 1702511011.0497193, 1702511011.0997193, 1702511011.1497192, 1702511011.1997192, 1702511011.2497191, 1702511011.299719, 1702511011.349719, 1702511011.399719, 1702511011.449719, 1702511011.499719, 1702511011.5497189, 1702511011.5997188, 1702511011.6497188, 1702511011.6997187, 1702511011.7497187, 1702511011.7997186, 1702511011.8497186, 1702511011.8997185, 1702511011.9497185, 1702511011.9997184, 1702511012.0497184, 1702511012.0997183, 1702511012.1497183, 1702511012.1997182, 1702511012.2497182, 1702511012.2997181, 1702511012.349718, 1702511012.399718, 1702511012.449718, 1702511012.499718, 1702511012.549718, 1702511012.5997179, 1702511012.6497178, 1702511012.6997178, 1702511012.7497177, 1702511012.7997177, 1702511012.8497176, 1702511012.8997176, 1702511012.9497175, 1702511014.9497156, 1702511015.0497155, 1702511015.1497154, 1702511015.3497152, 1702511015.649715, 1702511015.8497148, 1702511016.1497145, 1702511016.2497144, 1702511016.2997143, 1702511016.3497143, 1702511016.3997142, 1702511016.4497142, 1702511016.4997141, 1702511016.549714, 1702511016.599714, 1702511016.649714, 1702511016.8497138, 1702511016.8997138, 1702511016.9497137, 1702511017.0497136, 1702511017.0997136, 1702511017.1497135, 1702511017.1997135, 1702511017.2497134, 1702511017.2997134, 1702511017.3497133, 1702511017.3997133, 1702511017.4497132, 1702511017.4997132, 1702511017.5497131, 1702511017.599713, 1702511017.649713, 1702511017.699713, 1702511017.749713, 1702511017.799713, 1702511017.8497128, 1702511017.8997128, 1702511017.9497128, 1702511017.9997127, 1702511018.0497127, 1702511018.0997126, 1702511018.1497126, 1702511018.1997125, 1702511018.2497125, 1702511018.2997124, 1702511018.3497124, 1702511018.3997123, 1702511018.4497123, 1702511018.4997122, 1702511018.5497122, 1702511018.5997121, 1702511018.649712, 1702511018.699712, 1702511018.749712, 1702511018.799712, 1702511018.849712, 1702511018.8997118, 1702511018.9497118, 1702511018.9997118, 1702511019.0497117, 1702511020.3997104, 1702511021.899709, 1702511022.0997088, 1702511022.1497087, 1702511022.4497085, 1702511024.7997062, 1702511025.2997057, 1702511025.5497055, 1702511025.5997055, 1702511025.7497053, 1702511025.7997053, 1702511025.8497052, 1702511025.8997052, 1702511025.9497051, 1702511025.999705, 1702511026.049705, 1702511026.099705, 1702511026.149705, 1702511026.199705, 1702511026.2497048, 1702511026.2997048, 1702511026.3497047, 1702511026.3997047, 1702511026.4497046, 1702511027.049704, 1702511027.5997036, 1702511027.6497035, 1702511027.6997035, 1702511027.7497034, 1702511027.8497033, 1702511027.8997033, 1702511027.9497032, 1702511030.5497007, 1702511030.5997007, 1702511030.6497006, 1702511030.6997006, 1702511030.7497005, 1702511030.9497004, 1702511030.9997003, 1702511031.1497002, 1702511031.1997, 1702511031.2497, 1702511031.2997, 1702511031.3497, 1702511031.6496997, 1702511031.6996996, 1702511031.7496996, 1702511031.7996995, 1702511031.8496995, 1702511031.8996994, 1702511031.9496994, 1702511031.9996994, 1702511032.0496993, 1702511032.0996993, 1702511032.1496992, 1702511032.1996992, 1702511032.249699, 1702511032.299699, 1702511032.349699, 1702511032.399699, 1702511032.449699, 1702511032.4996989, 1702511032.5496988, 1702511032.6496987, 1702511032.7496986, 1702511032.8496985, 1702511032.8996985, 1702511032.9496984, 1702511033.0496984, 1702511033.0996983, 1702511033.1496983, 1702511033.1996982, 1702511033.2496982, 1702511033.299698, 1702511033.349698, 1702511033.399698, 1702511033.449698, 1702511033.499698, 1702511033.5496979, 1702511033.5996978, 1702511033.6496978, 1702511033.6996977, 1702511033.7496977, 1702511033.7996976, 1702511033.8496976, 1702511033.8996975, 1702511033.9496975, 1702511034.399697, 1702511040.4496913, 1702511040.4996912, 1702511040.5496912, 1702511040.5996912, 1702511040.649691, 1702511040.699691, 1702511040.749691, 1702511040.799691, 1702511040.849691, 1702511040.8996909, 1702511040.9496908, 1702511040.9996908, 1702511041.0496907, 1702511041.0996907, 1702511041.1496906, 1702511041.1996906, 1702511041.2496905, 1702511041.2996905, 1702511041.3496904, 1702511041.3996904, 1702511041.4496903, 1702511041.4996903, 1702511041.5496902, 1702511041.5996902, 1702511041.6496902, 1702511041.69969, 1702511041.74969, 1702511041.79969, 1702511041.84969, 1702511041.89969, 1702511041.9496899, 1702511041.9996898, 1702511042.0496898, 1702511042.0996897, 1702511042.1496897, 1702511042.1996896, 1702511042.2496896, 1702511042.2996895, 1702511042.3496895, 1702511042.3996894, 1702511042.4496894, 1702511042.4996893, 1702511042.6496892, 1702511042.6996891, 1702511048.6496835, 1702511054.0496783, 1702511054.0996783, 1702511054.1496782, 1702511054.1996782, 1702511054.2496781, 1702511054.299678, 1702511054.349678, 1702511054.399678, 1702511054.449678, 1702511054.499678, 1702511054.5496778, 1702511054.5996778, 1702511054.6496778, 1702511054.6996777, 1702511054.7496777, 1702511054.7996776, 1702511054.8496776, 1702511054.8996775, 1702511054.9496775, 1702511054.9996774, 1702511055.0496774, 1702511055.0996773, 1702511055.1496773, 1702511055.1996772, 1702511055.2496772, 1702511055.2996771, 1702511055.349677, 1702511055.399677, 1702511055.449677, 1702511055.499677, 1702511055.549677, 1702511055.5996768, 1702511055.6496768, 1702511055.6996768, 1702511055.7496767, 1702511055.7996767, 1702511055.8496766, 1702511055.8996766, 1702511055.9496765, 1702511055.9996765, 1702511056.6996758, 1702511056.7496758, 1702511056.7996757, 1702511056.8496757, 1702511056.8996756, 1702511056.9496756, 1702511056.9996755, 1702511057.0496755, 1702511057.1496754, 1702511057.1996753, 1702511057.2496753, 1702511057.2996752, 1702511057.3496752, 1702511057.3996751, 1702511057.449675, 1702511057.499675, 1702511057.549675, 1702511057.599675, 1702511057.649675, 1702511057.6996748, 1702511057.7496748, 1702511057.7996747, 1702511057.8496747, 1702511057.8996747, 1702511057.9496746, 1702511057.9996746, 1702511058.0496745, 1702511058.0996745, 1702511058.1496744, 1702511058.1996744, 1702511058.2496743, 1702511058.2996743, 1702511058.3496742, 1702511058.3996742, 1702511058.4496741, 1702511058.499674, 1702511058.549674, 1702511058.599674, 1702511058.649674, 1702511058.699674, 1702511058.7496738, 1702511058.7996738, 1702511058.8496737, 1702511058.8996737, 1702511058.9496737, 1702511058.9996736, 1702511059.0496736, 1702511059.0996735, 1702511059.1996734, 1702511059.2496734, 1702511059.2996733, 1702511059.3496733, 1702511059.3996732, 1702511059.4496732, 1702511059.4996731, 1702511059.549673, 1702511059.599673, 1702511059.649673, 1702511059.699673, 1702511059.749673, 1702511059.7996728, 1702511059.8496728, 1702511059.8996727, 1702511059.9496727, 1702511059.9996727, 1702511060.0496726, 1702511060.0996726, 1702511060.1496725, 1702511060.1996725, 1702511060.2496724, 1702511060.2996724, 1702511060.3496723, 1702511060.3996723, 1702511060.4496722, 1702511060.4996722, 1702511060.5496721, 1702511060.599672, 1702511060.649672, 1702511060.699672, 1702511061.1496716, 1702511061.1996715, 1702511061.2496715, 1702511061.2996714, 1702511061.3496714, 1702511061.3996713, 1702511061.4496713, 1702511061.4996712, 1702511061.5496712, 1702511061.5996711, 1702511061.649671, 1702511061.699671, 1702511061.749671, 1702511061.799671, 1702511061.849671, 1702511061.8996708, 1702511061.9496708, 1702511061.9996707, 1702511062.0496707, 1702511062.0996706, 1702511062.1496706, 1702511062.1996706, 1702511062.2496705, 1702511062.2996705, 1702511062.3496704, 1702511062.3996704, 1702511062.4496703, 1702511062.4996703, 1702511062.5496702, 1702511062.5996702, 1702511062.6496701, 1702511062.69967, 1702511062.74967, 1702511062.79967, 1702511062.84967, 1702511062.89967, 1702511062.9496698, 1702511062.9996698, 1702511063.0496697, 1702511063.0996697, 1702511063.1496696, 1702511063.1996696, 1702511063.2496696, 1702511063.2996695, 1702511063.3496695, 1702511063.4496694, 1702511075.6496577, 1702511076.0996573, 1702511076.5496569, 1702511076.5996568, 1702511076.6496568, 1702511076.7996566, 1702511077.1996562, 1702511077.2496562, 1702511077.2996562, 1702511077.549656, 1702511077.5996559, 1702511078.0996554, 1702511078.1496553, 1702511078.599655, 1702511078.6496549, 1702511078.6996548, 1702511078.8496547, 1702511079.2496543, 1702511079.2996542, 1702511079.3496542, 1702511079.3996542, 1702511079.449654, 1702511079.8996537, 1702511079.9496536, 1702511079.9996536, 1702511080.1496534, 1702511081.549652, 1702511081.599652, 1702511081.649652, 1702511081.699652, 1702511081.749652, 1702511081.7996519, 1702511081.8496518, 1702511081.8996518, 1702511081.9496517, 1702511081.9996517, 1702511082.0496516, 1702511082.0996516, 1702511082.1496515, 1702511082.1996515, 1702511082.2496514, 1702511082.2996514, 1702511082.3496513, 1702511082.3996513, 1702511082.4496512, 1702511082.4996512, 1702511082.5496511, 1702511082.599651, 1702511082.649651, 1702511082.699651, 1702511082.749651, 1702511082.799651, 1702511082.8496509, 1702511082.8996508, 1702511082.9496508, 1702511082.9996507, 1702511083.0496507, 1702511083.0996506, 1702511083.1496506, 1702511083.1996505, 1702511083.2496505, 1702511083.2996504, 1702511083.3496504, 1702511083.3996503, 1702511083.4496503, 1702511083.4996502, 1702511083.5496502, 1702511083.5996501, 1702511083.64965, 1702511083.69965, 1702511083.74965, 1702511083.79965, 1702511083.84965, 1702511083.8996499, 1702511083.9496498, 1702511083.9996498, 1702511084.0496497, 1702511084.0996497, 1702511084.1496496, 1702511084.1996496, 1702511084.2496495, 1702511084.2996495, 1702511084.3496494, 1702511084.3996494, 1702511084.4496493, 1702511084.4996493, 1702511084.5496492, 1702511084.5996492, 1702511084.6496491, 1702511084.699649, 1702511084.749649, 1702511084.799649, 1702511084.849649, 1702511084.899649, 1702511087.1996467, 1702511087.2496467, 1702511087.7496462, 1702511089.1996448, 1702511089.2496448, 1702511089.2996447, 1702511089.7996442, 1702511105.9496288, 1702511105.9996288, 1702511106.0496287, 1702511106.0996287, 1702511106.1496286, 1702511106.1996286, 1702511106.2496285, 1702511106.2996285, 1702511106.3496284, 1702511106.3996284, 1702511106.4496284, 1702511106.4996283, 1702511106.5496283, 1702511106.5996282, 1702511106.6496282, 1702511106.699628, 1702511106.749628, 1702511106.799628, 1702511106.849628, 1702511106.899628, 1702511106.9496279, 1702511106.9996278, 1702511107.0496278, 1702511107.0996277, 1702511107.1496277, 1702511107.1996276, 1702511107.2496276, 1702511107.2996275, 1702511107.3496275, 1702511107.3996274, 1702511107.4496274, 1702511107.4996274, 1702511107.5496273, 1702511107.5996273, 1702511107.6496272, 1702511107.6996272, 1702511107.749627, 1702511107.799627, 1702511107.849627, 1702511107.899627, 1702511107.949627, 1702511107.9996269, 1702511117.8996174, 1702511119.9496155, 1702511121.399614, 1702511121.449614, 1702511121.499614, 1702511121.549614, 1702511121.599614, 1702511121.6496139, 1702511121.6996138, 1702511122.3996131, 1702511122.449613, 1702511122.499613, 1702511122.549613, 1702511123.649612, 1702511124.3496113, 1702511124.4496112, 1702511124.4996111, 1702511124.549611, 1702511124.599611, 1702511124.649611, 1702511124.699611, 1702511125.0996106, 1702511125.1496105, 1702511125.1996105, 1702511125.2496104, 1702511125.8996098, 1702511125.9496098, 1702511126.0996096, 1702511126.1496096, 1702511126.1996095, 1702511126.2496095, 1702511126.2996094, 1702511126.3496094, 1702511126.3996093, 1702511126.4496093, 1702511126.4996092, 1702511126.5496092, 1702511126.799609, 1702511127.3996084, 1702511127.4496083, 1702511127.4996083, 1702511127.5496082, 1702511127.5996082, 1702511128.0996077, 1702511128.3496075, 1702511129.6996062, 1702511131.6996043, 1702511131.7496042, 1702511135.3996007, 1702511137.199599, 1702511137.6495986, 1702511137.8495984, 1702511138.5995977, 1702511138.6495976, 1702511138.7495975, 1702511138.9495974, 1702511139.1495972, 1702511139.1995971, 1702511139.249597, 1702511139.299597, 1702511139.349597, 1702511139.399597, 1702511139.8495965, 1702511139.8995965, 1702511139.9495964, 1702511139.9995964, 1702511140.0495963, 1702511140.0995963, 1702511142.1495943, 1702511142.1995943, 1702511142.349594, 1702511143.449593, 1702511143.499593, 1702511144.1495924, 1702511145.499591, 1702511145.549591, 1702511145.7995908, 1702511145.8495908, 1702511145.8995907, 1702511145.9495907, 1702511145.9995906, 1702511146.4495902, 1702511146.4995902, 1702511146.54959, 1702511146.59959, 1702511147.3495893, 1702511147.3995893, 1702511147.4495893, 1702511147.4995892, 1702511147.5495892, 1702511149.849587, 1702511149.899587, 1702511149.9495869, 1702511149.9995868, 1702511150.0495868, 1702511150.0995867, 1702511150.1495867, 1702511150.1995866, 1702511150.5995862, 1702511150.6495862, 1702511150.6995862, 1702511150.749586, 1702511150.799586, 1702511151.2495856, 1702511151.2995856, 1702511151.3495855, 1702511151.4495854, 1702511151.7495852, 1702511151.899585, 1702511152.1995847, 1702511152.2495847, 1702511152.899584, 1702511153.4995835, 1702511153.5495834, 1702511154.2495828, 1702511154.2995827, 1702511155.5495815, 1702511155.5995815, 1702511155.6495814, 1702511155.6995814, 1702511155.7495813, 1702511155.7995813, 1702511155.8495812, 1702511155.8995812, 1702511155.9495811, 1702511155.999581, 1702511156.049581, 1702511156.199581, 1702511156.9995801, 1702511157.3995798, 1702511157.5495796, 1702511157.5995796, 1702511157.6495795, 1702511157.8995793, 1702511157.9495792, 1702511157.9995792, 1702511158.0495791, 1702511158.099579, 1702511158.149579, 1702511158.9495783, 1702511158.9995782, 1702511159.0495782, 1702511159.0995781, 1702511159.149578, 1702511159.199578, 1702511159.249578, 1702511159.299578, 1702511159.349578, 1702511159.4995778, 1702511159.5495777, 1702511159.5995777, 1702511159.6495776, 1702511159.6995776, 1702511159.7495775, 1702511159.7995775, 1702511159.8495774, 1702511159.8995774, 1702511160.0495772, 1702511160.0995772, 1702511160.1495771, 1702511160.199577, 1702511160.249577, 1702511160.299577, 1702511160.349577, 1702511160.399577, 1702511160.4495769, 1702511160.6495767, 1702511160.6995766, 1702511160.7495766, 1702511160.7995765, 1702511160.8495765, 1702511160.9495764, 1702511161.0495763, 1702511161.0995762, 1702511161.249576, 1702511161.299576, 1702511161.349576, 1702511161.449576, 1702511162.0495753, 1702511169.799568, 1702511171.849566, 1702511185.9495525, 1702511186.6495519, 1702511189.0995495, 1702511189.1495495, 1702511189.2495494, 1702511189.2995493, 1702511189.3495493, 1702511189.3995492, 1702511189.4495492, 1702511189.4995492, 1702511189.549549, 1702511189.599549, 1702511189.649549, 1702511189.699549, 1702511189.749549, 1702511189.8495488, 1702511189.9495487, 1702511189.9995487, 1702511190.0495486, 1702511190.0995486, 1702511190.1495485, 1702511190.3495483, 1702511190.599548, 1702511190.699548, 1702511190.749548, 1702511193.3995454, 1702511195.4495435, 1702511196.5995424, 1702511197.6995413, 1702511198.099541, 1702511198.2995408, 1702511198.4995406, 1702511198.5495405, 1702511198.7495403, 1702511198.7995403, 1702511199.7495394, 1702511200.4495387, 1702511200.7995384, 1702511201.099538, 1702511212.3995273, 1702511212.4495273, 1702511212.4995272, 1702511212.5495272, 1702511212.5995271, 1702511212.749527, 1702511212.8995268, 1702511212.9495268, 1702511212.9995267, 1702511213.0995266, 1702511213.1495266, 1702511213.1995265, 1702511213.2495265, 1702511213.2995265, 1702511213.3495264, 1702511213.4495263, 1702511213.4995263, 1702511213.5495262, 1702511213.5995262, 1702511213.6495261, 1702511213.699526, 1702511213.749526, 1702511213.799526, 1702511213.849526, 1702511213.899526, 1702511213.9495258, 1702511213.9995258, 1702511214.0495257, 1702511214.0995257, 1702511214.1495256, 1702511214.1995256, 1702511214.2495255, 1702511214.2995255, 1702511214.3495255, 1702511214.3995254, 1702511214.4495254, 1702511214.5495253, 1702511214.5995252, 1702511214.6495252, 1702511214.699525, 1702511214.749525, 1702511214.799525, 1702511214.849525, 1702511214.899525, 1702511215.0995247, 1702511243.8494973, 1702511244.8994963, 1702511244.9494963, 1702511245.349496, 1702511245.9994953, 1702511246.0494952, 1702511246.249495, 1702511246.299495, 1702511246.349495, 1702511246.7994945, 1702511246.8494945, 1702511247.0494943, 1702511247.0994942, 1702511247.1494942, 1702511247.4994938, 1702511247.6994936, 1702511248.0994933, 1702511255.4994862, 1702511257.4994843, 1702511257.5494843, 1702511261.8494802, 1702511261.94948, 1702511262.2494798, 1702511262.8494792, 1702511262.8994792, 1702511262.949479, 1702511263.149479, 1702511263.2994788, 1702511263.3494787, 1702511263.4494786, 1702511263.4994786, 1702511263.5494785, 1702511263.7494783, 1702511263.9494781, 1702511263.999478, 1702511264.049478, 1702511264.2994778, 1702511264.3494778, 1702511264.3994777, 1702511264.4494777, 1702511264.5494776, 1702511264.5994775, 1702511264.6494775, 1702511265.4494767, 1702511285.2494578, 1702511285.2994578, 1702511285.3494577, 1702511285.5494576, 1702511285.5994575, 1702511285.7494574, 1702511285.7994573, 1702511285.8494573, 1702511286.249457, 1702511286.2994568, 1702511286.5994565, 1702511286.6494565, 1702511286.6994565, 1702511287.7994554, 1702511288.3494549, 1702511288.6494546, 1702511292.349451, 1702511293.5994499, 1702511293.7494497, 1702511293.9494495, 1702511293.9994495, 1702511294.0494494, 1702511294.2494493, 1702511294.3494492, 1702511295.2494483, 1702511295.549448, 1702511296.4494472, 1702511296.499447, 1702511296.549447, 1702511296.699447, 1702511297.0494466, 1702511297.1494465, 1702511297.1994464, 1702511297.4994462, 1702511297.549446, 1702511297.599446, 1702511297.649446, 1702511297.699446, 1702511297.9994457, 1702511298.0494456, 1702511298.1994455, 1702511298.599445, 1702511298.749445, 1702511299.1494446, 1702511299.1994445, 1702511299.2994444, 1702511299.3494444, 1702511299.3994443, 1702511299.649444, 1702511299.699444, 1702511299.749444, 1702511299.799444, 1702511299.8994439, 1702511299.9494438, 1702511300.1494436, 1702511300.1994436, 1702511300.2494435, 1702511300.2994435, 1702511300.3994434, 1702511300.4494433, 1702511300.4994433, 1702511300.5494432, 1702511300.5994432, 1702511300.6494431, 1702511300.749443, 1702511300.799443, 1702511300.9994428, 1702511301.0494428, 1702511301.0994427, 1702511301.1494427, 1702511301.2994425, 1702511301.3494425, 1702511301.3994424, 1702511301.4494424, 1702511301.5494423, 1702511301.5994422, 1702511301.6494422, 1702511301.949442, 1702511301.9994419, 1702511302.0994418, 1702511302.1494417, 1702511302.3994415, 1702511302.4494414, 1702511302.4994414, 1702511302.5494413, 1702511302.5994413, 1702511302.6494412, 1702511302.6994412, 1702511302.7494411, 1702511303.0494409, 1702511303.0994408, 1702511303.1494408, 1702511304.04944, 1702511304.0994399, 1702511304.1494398, 1702511304.2494397, 1702511304.6494393, 1702511304.7494392, 1702511304.7994392, 1702511304.8494391, 1702511304.899439, 1702511304.949439, 1702511304.999439, 1702511305.049439, 1702511305.099439, 1702511305.1494389, 1702511305.2494388, 1702511305.2994387, 1702511305.3494387, 1702511305.3994386, 1702511305.4494386, 1702511305.4994385, 1702511305.5494385, 1702511305.5994384, 1702511305.6494384, 1702511305.6994383, 1702511305.7494383, 1702511305.7994382, 1702511305.8494382, 1702511305.8994381, 1702511305.949438, 1702511305.999438, 1702511306.049438, 1702511306.099438, 1702511306.149438, 1702511306.1994379, 1702511306.2494378, 1702511306.2994378, 1702511306.4994376, 1702511306.5494375, 1702511306.5994375, 1702511306.6494374, 1702511306.6994374, 1702511306.7494373, 1702511306.7994373, 1702511306.8994372, 1702511306.9494371, 1702511306.999437, 1702511307.049437, 1702511307.199437, 1702511307.2494369, 1702511307.2994368, 1702511307.3494368, 1702511307.3994367, 1702511307.7994363, 1702511307.8494363, 1702511308.2994359, 1702511308.5494356, 1702511308.5994356, 1702511308.6494355, 1702511308.6994355, 1702511308.7494354, 1702511308.7994354, 1702511308.8494353, 1702511308.8994353, 1702511308.9494352, 1702511308.9994352, 1702511309.0494351, 1702511309.099435, 1702511309.199435, 1702511309.249435, 1702511309.299435, 1702511309.3494349, 1702511309.3994348, 1702511309.4494348, 1702511309.4994347, 1702511309.5494347, 1702511309.5994346, 1702511309.6494346, 1702511309.6994345, 1702511309.7494345, 1702511309.7994344, 1702511309.8494344, 1702511309.8994343, 1702511309.9494343, 1702511309.9994342, 1702511310.0494342, 1702511310.0994341, 1702511310.149434, 1702511310.199434, 1702511310.249434, 1702511310.299434, 1702511310.349434, 1702511310.3994339, 1702511310.4494338, 1702511310.4994338, 1702511310.5494337, 1702511310.5994337, 1702511310.6494336, 1702511310.6994336, 1702511310.7494335, 1702511310.7994335, 1702511310.8494334, 1702511310.8994334, 1702511310.9494333, 1702511310.9994333, 1702511311.0494332, 1702511311.1494331, 1702511311.299433, 1702511313.349431, 1702511313.8994305, 1702511316.1494284, 1702511316.3994281, 1702511316.449428, 1702511316.499428, 1702511316.649428, 1702511316.8494277, 1702511316.9994276, 1702511317.0494275, 1702511317.0994275, 1702511317.1494274, 1702511317.1994274, 1702511317.2494273, 1702511317.2994273, 1702511317.3494272, 1702511317.4494271, 1702511317.549427, 1702511317.599427, 1702511317.649427, 1702511317.699427, 1702511317.7494268, 1702511317.7994268, 1702511317.8994267, 1702511317.9494267, 1702511319.799425, 1702511320.1494246, 1702511320.1994245, 1702511320.2494245, 1702511320.2994244, 1702511320.3994243, 1702511320.4494243, 1702511320.4994242, 1702511320.5494242, 1702511320.5994241, 1702511320.649424, 1702511320.699424, 1702511324.4994204, 1702511324.5494204, 1702511324.5994203, 1702511324.6494203, 1702511324.6994202, 1702511324.7494202, 1702511324.79942, 1702511324.84942, 1702511324.89942, 1702511324.94942, 1702511324.99942, 1702511325.0494199, 1702511325.0994198, 1702511325.1494198, 1702511325.1994197, 1702511325.2494197, 1702511325.2994196, 1702511325.3494196, 1702511325.3994195, 1702511325.4494195, 1702511325.4994195, 1702511325.5494194, 1702511325.5994194, 1702511325.6494193, 1702511325.6994193, 1702511325.7494192, 1702511325.7994192, 1702511325.849419, 1702511325.899419, 1702511325.949419, 1702511325.999419, 1702511326.049419, 1702511326.0994189, 1702511326.1494188, 1702511326.1994188, 1702511326.2494187, 1702511326.2994187, 1702511326.3494186, 1702511326.3994186, 1702511326.4494185, 1702511326.4994185, 1702511326.5494184, 1702511326.5994184, 1702511326.6494184, 1702511326.6994183, 1702511326.7494183, 1702511326.7994182, 1702511326.8494182, 1702511326.899418, 1702511326.949418, 1702511326.999418, 1702511327.049418, 1702511327.099418, 1702511327.1494179, 1702511327.1994178, 1702511327.2494178, 1702511327.2994177, 1702511327.3494177, 1702511327.3994176, 1702511327.4494176, 1702511327.4994175, 1702511327.5494175, 1702511327.5994174, 1702511327.6494174, 1702511327.6994174, 1702511327.7494173, 1702511327.7994173, 1702511327.8494172, 1702511327.8994172, 1702511327.949417, 1702511327.999417, 1702511328.049417, 1702511328.099417, 1702511328.149417, 1702511328.1994169, 1702511328.2494168]  # Example times (in seconds, presumably)

def find_closest_row(rows, target_time):
    if not rows:
        return None
    
    best_row = None
    best_diff = float('inf')
    
    for row in rows:
        diff = abs(row["time"] - target_time)
        if diff < best_diff:
            best_row = row
            best_diff = diff
    
    return best_row

def main():
    rows = joblib.load(JOBLIB_FILE)
    if not isinstance(rows, list):
        print("The loaded file does not contain a list of dictionaries. Exiting.")
        return
    
    if len(rows) == 0:
        print("No rows found in the loaded file. Exiting.")
        return
    
    rows = sorted(rows, key=lambda r: r["time"])
    
    selected_rows = []
    used_times = []
    for t in TIMES_OF_INTEREST:
        row = find_closest_row(rows, t)
        if row is not None:
            selected_rows.append(row)
            used_times.append(row["time"])
    
    if not selected_rows:
        print("None of the requested times have matching data. Exiting.")
        return
    
    fig, ax = plt.subplots()
    plt.ion()

    total_frames = len(selected_rows)
    current_index = 0

    current_class = 0

    def update_plot():
        row = selected_rows[current_index]

        r = row["red"]
        g = row["green"]
        b = row["blue"]
        
        r = np.asarray(r)
        g = np.asarray(g)
        b = np.asarray(b)
        
        base_img = np.dstack([r, g, b]).astype(float) / 255.0

        ax.clear()
        ax.imshow(base_img, origin='upper', interpolation='nearest')

        if current_class != 0:
            class_key = f"class{current_class}"
            if class_key in row:
                class_map = np.asarray(row[class_key])
                
                overlay = np.zeros((class_map.shape[0], class_map.shape[1], 4), dtype=float)
                overlay[..., 0] = 1.0 
                overlay[..., 1] = 0.0
                overlay[..., 2] = 0.0
                overlay[..., 3] = 0.8 * (class_map != 0)
                
                ax.imshow(overlay, origin='upper', interpolation='nearest')
            else:
                print(f"Warning: Row does not have '{class_key}'. No overlay applied.")
        
        requested_t = TIMES_OF_INTEREST[current_index]
        actual_t = used_times[current_index]
        
        ax.set_title(
            f"Frame {current_index+1}/{total_frames} \n"
            f"(req: {requested_t:.3f}, actual: {actual_t:.3f}) \n"
            f"Class {current_class} (0=none)"
        )
        plt.draw()

    def on_key(event):
        nonlocal current_index, current_class
        if event.key == 'left':
            current_class = (current_class - 1) % 8 
            update_plot()
        elif event.key == 'right':
            current_class = (current_class + 1) % 8
            update_plot()
        elif event.key == 'up':
            current_index = (current_index + 1) % total_frames
            update_plot()
        elif event.key == 'down':
            current_index = (current_index - 1) % total_frames
            update_plot()

    fig.canvas.mpl_connect('key_press_event', on_key)

    update_plot()
    plt.show(block=True)

if __name__ == "__main__":
    main()
